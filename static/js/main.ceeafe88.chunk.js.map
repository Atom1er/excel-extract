{"version":3,"sources":["logo.svg","Home.js","App.js","reportWebVitals.js","index.js"],"names":["ReactExport","ExcelFile","ExcelSheet","ExcelColumn","App","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","sheetsNames","setSheetsNames","_useState5","_useState6","sheetsData","setSheetsData","_useState7","_useState8","input","setInput","_useState9","_useState10","setExcelHeaders","_useState11","_useState12","setExceldt","_useState13","_useState14","renderExcel","setRenderExcel","_useState15","_useState16","sampling","setSampling","_useState17","_useState18","noFileErr","setNoFileErr","_useState19","_useState20","setNoSamplingErr","_useState21","_useState22","setNoInterErr","_useState23","_useState24","noValidSheetErr","_useState25","_useState26","from","setFrom","_useState27","_useState28","to","setTo","useEffect","document","getElementById","getData","names","index","length","readXlsxFile","files","sheet","name","then","rows","sheetsDt","push","checked","i","setTimeout","console","log","handleSheetSelect","e","type","target","value","_jsxs","className","children","_jsx","style","fontSize","textAlign","FormControl","component","FormGroup","row","display","flexDirection","justifyContent","id","accept","Button","backgroundColor","color","margin","onClick","getSheets","nmes","forEach","n","flexWrap","marginTop","borderRight","marginRight","FormLabel","RadioGroup","onChange","map","FormControlLabel","control","Radio","label","marginBottom","sht","el","shttt","toSamplingEl","sampRowId","fromSheeet","interEl","Number","toString","replace","tocopy","doneData","selectedDt","shhht","l","objj","s","_Fragment","CircularProgress","textDecoration","CSVDownload","data","hist","createBrowserHistory","Router","history","Switch","Route","path","render","Home","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","React","StrictMode"],"mappings":"2eAAe,I,uHCgBGA,IAAYC,UACXD,IAAYC,UAAUC,WACrBF,IAAYC,UAAUE,YAqR3BC,MAlRf,WAEE,IAAAC,EAA8BC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,EAAsCL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,EAAoCT,mBAAS,IAAGU,EAAAR,YAAAO,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAA0Bb,mBAAS,MAAKc,EAAAZ,YAAAW,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,EAAwCjB,mBAAS,MAAKkB,EAAAhB,YAAAe,EAAA,GAAjCE,GAAFD,EAAA,GAAiBA,EAAA,IACpCE,EAA8BpB,mBAAS,MAAKqB,EAAAnB,YAAAkB,EAAA,GAA5BE,GAAFD,EAAA,GAAYA,EAAA,IAC1BE,EAAsCvB,oBAAS,GAAMwB,EAAAtB,YAAAqB,EAAA,GAA9CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,EAAgC3B,oBAAS,GAAM4B,EAAA1B,YAAAyB,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,EAAkC/B,oBAAS,GAAMgC,EAAA9B,YAAA6B,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,EAA0CnC,oBAAS,GAAKoC,EAAAlC,YAAAiC,EAAA,GAAlCE,GAAFD,EAAA,GAAkBA,EAAA,IACtCE,EAAoCtC,oBAAS,GAAKuC,EAAArC,YAAAoC,EAAA,GAA/BE,GAAFD,EAAA,GAAeA,EAAA,IAChCE,EAA8CzC,oBAAS,GAAM0C,GAAAxC,YAAAuC,EAAA,GAAtDE,GAAeD,GAAA,GACtBE,IAD0CF,GAAA,GAClB1C,mBAAS,KAAG6C,GAAA3C,YAAA0C,GAAA,GAA7BE,GAAID,GAAA,GAAEE,GAAOF,GAAA,GACpBG,GAAoBhD,mBAAS,IAAGiD,GAAA/C,YAAA8C,GAAA,GAAzBE,GAAED,GAAA,GAAEE,GAAKF,GAAA,GAEhBG,qBAAU,WACRpC,EAASqC,SAASC,eAAe,SACnC,GAAG,IAEH,IAiCMC,GAAU,SAAVA,EAAWC,EAAOC,GAClBD,EAAME,OAASD,EACjBE,YAAa5C,EAAM6C,MAAM,GAAI,CAAEC,MAAOL,EAAMC,GAAOK,OAAQC,MAAK,SAACC,GAC/D,IAAIC,EAAWtD,EACfsD,EAASC,KAAK,CACZJ,KAAMN,EAAMC,GAAOK,KACnBE,KAAMA,EACNG,SAAS,IAEPX,EAAMC,GAAOK,MAAQhB,IACvBN,GAAc,GAEZgB,EAAMC,GAAOK,MAAQZ,IACvBb,GAAiB,GAEnBzB,EAAcqD,GACd,IAAIG,EAAIX,EAAQ,EAChBY,YAAW,WACTd,EAAQC,EAAOY,EACjB,GAAG,IACL,IAEAC,YAAW,WACTjE,GAAW,GACXkE,QAAQC,IAAI,eAAgB5D,EAC9B,GAAG,IAEP,EAEM6D,GAAoB,SAACC,EAAGC,GAChB,QAARA,EACF3B,GAAQ0B,EAAEE,OAAOC,OAEjBzB,GAAMsB,EAAEE,OAAOC,MAEnB,EA4GA,OACEC,eAAA,OAAKC,UAAU,iBAAgBC,SAAA,CAC7BC,cAAA,MAAAD,SAAI,gDACJF,eAAA,MAAII,MAAO,CAAEC,SAAU,SAAUC,UAAW,QAASJ,SAAA,CACnDC,cAAA,MAAAD,SAAI,qCACJC,cAAA,MAAAD,SAAI,gCAENC,cAAA,MAAAD,SAAI,kFACJF,eAAA,MAAII,MAAO,CAAEC,SAAU,SAAUC,UAAW,QAASJ,SAAA,CACnDC,cAAA,MAAAD,SAAI,gBACJC,cAAA,MAAAD,SAAI,kBACJC,cAAA,MAAAD,SAAI,mBAENC,cAAA,MAAAD,SAAI,qFACJC,cAAA,MAAAD,SAAI,oDACJF,eAAA,MAAII,MAAO,CAAEC,SAAU,SAAUC,UAAW,QAASJ,SAAA,CACnDC,cAAA,MAAAD,SAAI,mEACJC,cAAA,MAAAD,SAAI,+EACJC,cAAA,MAAAD,SAAI,qCACJC,cAAA,MAAAD,SAAI,4DAENC,cAACI,IAAW,CAACC,UAAU,WAAUN,SAE/BF,eAACS,IAAS,CAAC,aAAW,WAAWC,KAAG,EAACN,MAAO,CAAEO,QAAS,OAAQC,cAAe,SAAUC,eAAgB,UAAWX,SAAA,CACjHF,eAAA,OAAKI,MAAO,CAAEO,QAAS,OAAQC,cAAe,MAAOC,eAAgB,UAAWX,SAAA,CAC9EC,cAAA,SAAON,KAAK,OAAOiB,GAAG,QAAQC,OAAO,gGACnCzF,EAEE,KADF6E,cAACa,IAAM,CAACZ,MAAO,CAAEa,gBAAiB,QAASC,MAAO,QAASC,OAAQ,YAAcC,QA3M7E,WACd3B,QAAQC,IAAI,WAGRxD,EAAM6C,MAAM,IACdxD,GAAW,GACX8B,GAAa,GAEbyB,YAAa5C,EAAM6C,MAAM,GAAI,CAAEsC,WAAW,IAAQnC,MAAK,SAACP,GACtDc,QAAQC,IAAI,UAAWf,GAEvB,IAAI2C,EAAO,GACX3C,EAAM4C,SAAQ,SAAAC,GACZF,EAAKjC,KAAK,CACRJ,KAAMuC,EAAEvC,KACRK,SAAS,GAEb,IACA3D,EAAe2F,GACfvF,EAAc,IACd4B,GAAc,GACdH,GAAiB,GACbmB,EAAME,OAAS,GACjBH,GAAQC,EAAO,EAGnB,KAEAtB,GAAa,EAGjB,EA4K8G6C,SAAC,iBAGtG9C,GAAc+C,cAAA,QAAMC,MAAO,CAAEc,MAAO,MAAOC,OAAQ,YAAajB,SAAC,mEACjExE,EAAYmD,OAAS,GACpBmB,eAAA,OAAKI,MAAO,CAAEO,QAAS,OAAQC,cAAe,MAAOC,eAAgB,eAAgBY,SAAU,OAAQC,UAAW,QAASxB,SAAA,CACzHF,eAACO,IAAW,CAACC,UAAU,WAAWJ,MAAO,CAAEuB,YAAa,kBAAmBC,YAAa,QAAS1B,SAAA,CAC/FC,cAAC0B,IAAS,CAACzB,MAAO,CAAEc,MAAO,SAAUhB,SAAC,eACtCC,cAAC2B,IAAU,CAAC,aAAW,SAAS7C,KAAK,UAAUc,MAAO9B,GAAM8D,SAAU,SAACnC,GAAC,OAAKD,GAAkBC,EAAG,OAAO,EAACM,SACvGxE,EAAYsG,KAAI,SAACR,EAAGV,GAAE,OACrBX,cAAA,OAAoBF,UAAU,2BAA2BG,MAAO,CAAEO,QAAS,OAAQQ,OAAQ,WAAYP,cAAe,MAAOC,eAAgB,eAAgBY,SAAU,QAASvB,SAE9KC,cAAC8B,IAAgB,CAAClC,MAAOyB,EAAEvC,KAAMiD,QAAS/B,cAACgC,IAAK,IAAKC,MAAOZ,EAAEvC,QAFtD,IAAM6B,EAGV,SAGZd,eAACO,IAAW,CAACC,UAAU,WAAUN,SAAA,CAC/BC,cAAC0B,IAAS,CAACzB,MAAO,CAAEc,MAAO,SAAUhB,SAAC,oBACtCC,cAAC2B,IAAU,CAAC,aAAW,SAAS7C,KAAK,WAAWc,MAAO1B,GAAI0D,SAAU,SAACnC,GAAC,OAAKD,GAAkBC,EAAG,KAAK,EAACM,SACpGxE,EAAYsG,KAAI,SAACR,EAAGV,GAAE,OACrBX,cAAA,OAAqBF,UAAU,2BAA2BG,MAAO,CAAEO,QAAS,OAAQQ,OAAQ,WAAYP,cAAe,MAAOC,eAAgB,eAAgBY,SAAU,QAASvB,SAE/KC,cAAC8B,IAAgB,CAAClC,MAAOyB,EAAEvC,KAAMiD,QAAS/B,cAACgC,IAAK,IAAKC,MAAOZ,EAAEvC,QAFtD,KAAO6B,EAGX,aAKdxF,GAAWY,GAASA,EAAM6C,MAAM,GAChCoB,cAACa,IAAM,CAACZ,MAAO,CAAEa,gBAAiB,QAASC,MAAO,QAASmB,aAAc,QAAUjB,QAlK9E,WAOb,IAAIhC,EAAWtD,EAEfP,GAAW,GACX6D,EAASmC,SAAQ,SAACe,GACZA,EAAIrD,MAAQZ,IACde,EAASmC,SAAQ,SAACvC,GACZA,EAAMC,MAAQhB,IAChBe,EAAMG,KAAK,GAAGoC,SAAQ,SAACgB,GACrBD,EAAInD,KAAK,GAAGE,KAAKkD,EACnB,GAEJ,GAEJ,IAEAnD,EAASmC,SAAQ,SAACiB,EAAOjD,GACnBiD,EAAMvD,MAAQZ,IAChBmE,EAAMrD,KAAKoC,SAAQ,SAACkB,EAAcC,GAEhCtD,EAASmC,SAAQ,SAACoB,GACZA,EAAW1D,MAAQhB,IACrB0E,EAAWxD,KAAKoC,SAAQ,SAACqB,GACA,GAAnBH,EAAa,KACfA,EAAa,GAAK,KAEG,GAAnBA,EAAa,KACfA,EAAa,GAAK,KAEhBA,EAAa,IAAMG,EAAQ,KAC7BnD,QAAQC,IAAI,kBAAmB+C,EAAa,IAC5ChD,QAAQC,IAAI,WAAY+C,EAAa,IAAMG,EAAQ,IAAMA,EAAQ,IAE/DnD,QAAQC,IAAI,gCAAiC+C,EAAa,IAC1DhD,QAAQC,IAAI,gCAAiC+C,EAAa,IAC1DhD,QAAQC,IAAI,2BAA4BkD,EAAQ,IAChDnD,QAAQC,IAAI,2BAA4BkD,EAAQ,IAC3CC,OAAOJ,EAAa,GAAGK,WAAWC,QAAQ,IAAK,OAASF,OAAOD,EAAQ,GAAGE,WAAWC,QAAQ,IAAK,OACrGF,OAAOJ,EAAa,GAAGK,WAAWC,QAAQ,IAAK,MAAQF,OAAOD,EAAQ,GAAGE,WAAWC,QAAQ,IAAK,OACjGtD,QAAQC,IAAI,MACZkD,EAAQrB,SAAQ,SAACyB,GACfP,EAAapD,KAAK2D,EACpB,KAEAvD,QAAQC,IAAI,aAMpB,GAEJ,GACF,GAEJ,IAEA,IAAIuD,EAAW,GAEXC,EAAa,KAEjB9D,EAASmC,SAAQ,SAAC4B,EAAO5D,GACnB4D,EAAMlE,MAAQZ,KAChB6E,EAAaC,EAAMhE,KAEvB,IAEAlC,EAAYiG,GAEAA,EAAW,GACvB5G,EAAgB4G,EAAW,IAE3B,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAWrE,OAAQuE,IAAK,CAE1C,IADA,IAAIC,EAAO,CAAC,EACHC,EAAI,EAAGA,EAAIJ,EAAWE,GAAGvE,OAAQyE,IACxCD,EAAKH,EAAW,GAAGI,IAAMJ,EAAWE,GAAGE,GAEzCL,EAAS5D,KAAKgE,EAChB,CAEA5G,EAAWwG,GACX1H,GAAW,GACXsB,GAAe,GACf4C,QAAQC,IAAI,aAAcuD,GAC1BxD,QAAQC,IAAI,oCAAqCN,EACnD,EAuE6Gc,SAAC,YACjGF,eAAAuD,WAAA,CAAArD,SAAA,CAAE,IAAE5E,GAAW0E,eAAA,MAAAE,SAAA,CAAIC,cAACqD,IAAgB,IAAG,uCAAuC,OAClF1F,IACCkC,eAAA,QAAMI,MAAO,CAAEc,MAAO,MAAOC,OAAQ,YAAajB,SAAA,CAAC,yDAAsDC,cAAA,UAAQC,MAAO,CAAEqD,eAAgB,aAAcvD,SAAC,4BAAgC,OAAIC,cAAA,UAAQC,MAAO,CAAEqD,eAAgB,aAAcvD,SAAC,eAAmB,YAIrQtD,GACCuD,cAACuD,cAAW,CAACC,KAAM3G,EAAU8C,OAAO,aAW5C,E,QC9RM8D,EAAOC,cAeE5I,MAbf,WAEE,OACEkF,cAAAoD,WAAA,CAAArD,SACEC,cAAC2D,IAAM,CAACC,QAASH,EAAK1D,SAClBC,cAAC6D,IAAM,CAAA9D,SACLC,cAAC8D,IAAK,CAACC,KAAK,IAAIC,OAAQ,kBAAOhE,cAACiE,EAAI,GAAG,SAKnD,ECReC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrF,MAAK,SAAAsF,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJAQ,IAASX,OACPhE,cAAC4E,IAAMC,WAAU,CAAA9E,SACfC,cAAClF,EAAG,MAENuD,SAASC,eAAe,SAM1B4F,G","file":"static/js/main.ceeafe88.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport readXlsxFile from 'read-excel-file';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ReactExport from \"react-data-export\";\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\n\nfunction App() {\n\n  const [loading, setLoading] = useState(false);\n  const [sheetsNames, setSheetsNames] = useState([]);\n  const [sheetsData, setSheetsData] = useState([]);\n  const [input, setInput] = useState(null);\n  const [excelHeaders, setExcelHeaders] = useState(null);\n  const [exceldt, setExceldt] = useState(null);\n  const [renderExcel, setRenderExcel] = useState(false);\n  const [sampling, setSampling] = useState(false);\n  const [noFileErr, setNoFileErr] = useState(false);\n  const [noSamplingErr, setNoSamplingErr] = useState(true);\n  const [noInterErr, setNoInterErr] = useState(true);\n  const [noValidSheetErr, setNoValidSheetErr] = useState(false);\n  const [from, setFrom] = useState('');\n  const [to, setTo] = useState('');\n\n  useEffect(() => {\n    setInput(document.getElementById('input'))\n  }, [])\n\n  const getFile = () => {\n    console.log('clicked');\n\n\n    if (input.files[0]) {\n      setLoading(true);\n      setNoFileErr(false);\n      // input.addEventListener('change', () => {\n      readXlsxFile(input.files[0], { getSheets: true }).then((names) => {\n        console.log(\"names: \", names);\n        // names === [{ name: 'Sheet1' }, { name: 'Sheet2' }]\n        var nmes = [];\n        names.forEach(n => {\n          nmes.push({\n            name: n.name,\n            checked: false\n          })\n        })\n        setSheetsNames(nmes);\n        setSheetsData([]);\n        setNoInterErr(true);\n        setNoSamplingErr(true);\n        if (names.length > 0) {\n          getData(names, 0);\n        }\n        // \n      })\n    } else {\n      setNoFileErr(true);\n    }\n    // })\n  }\n\n  const getData = (names, index) => {\n    if (names.length > index) {\n      readXlsxFile(input.files[0], { sheet: names[index].name }).then((rows) => {\n        var sheetsDt = sheetsData;\n        sheetsDt.push({\n          name: names[index].name,\n          rows: rows,\n          checked: true\n        });\n        if (names[index].name == from) {\n          setNoInterErr(false);\n        }\n        if (names[index].name == to) {\n          setNoSamplingErr(false);\n        }\n        setSheetsData(sheetsDt);\n        var i = index + 1;\n        setTimeout(() => {\n          getData(names, i);\n        }, 1000)\n      })\n    } else {\n      setTimeout(() => {\n        setLoading(false);\n        console.log(\"sheetsData: \", sheetsData);\n      }, 1000)\n    }\n  }\n\n  const handleSheetSelect = (e, type) => {\n    if (type == 'from') {\n      setFrom(e.target.value)\n    } else {\n      setTo(e.target.value);\n    }\n  }\n\n  const filter = () => {\n    // if (noInterErr || noSamplingErr) {\n    //   setNoValidSheetErr(true);\n    //   return;\n    // } else {\n    //   setNoValidSheetErr(false);\n    // }\n    var sheetsDt = sheetsData;\n    //Copying headers\n    setLoading(true);\n    sheetsDt.forEach((sht) => {\n      if (sht.name == to) {\n        sheetsDt.forEach((sheet) => {\n          if (sheet.name == from) {\n            sheet.rows[0].forEach((el) => {\n              sht.rows[0].push(el);\n            })\n          }\n        });\n      }\n    });\n    //merging\n    sheetsDt.forEach((shttt, i) => {\n      if (shttt.name == to) { // found target\n        shttt.rows.forEach((toSamplingEl, sampRowId) => { // loop rows\n\n          sheetsDt.forEach((fromSheeet) => {\n            if (fromSheeet.name == from) { // found data source\n              fromSheeet.rows.forEach((interEl) => {\n                if (toSamplingEl[1] == 0) {\n                  toSamplingEl[1] = '0'\n                }\n                if (toSamplingEl[2] == 0) {\n                  toSamplingEl[2] = '0'\n                }\n                if (toSamplingEl[0] == interEl[0]) { // comparing holes ids && making sure inter Depth From is between sample Depth From and Depth To\n                  console.log(\"found hole id: \", toSamplingEl[0]);\n                  console.log(\"getsin: \", toSamplingEl[1] && interEl[1] && interEl[2])\n                  // if ((toSamplingEl[1] && interEl[1] && interEl[2]) || (toSamplingEl[1] && interEl[1] && interEl[2]) === 0) { // comparing holes ids && making sure inter Depth From is between sample Depth From and Depth To\n                    console.log(\"found all 3 toSamplingEl[1]: \", toSamplingEl[1]);\n                    console.log(\"found all 3 toSamplingEl[2]: \", toSamplingEl[2]);\n                    console.log(\"found all 3 interEl[1]: \", interEl[1]);\n                    console.log(\"found all 3 interEl[2]: \", interEl[2]);\n                    if ( Number(toSamplingEl[1].toString().replace(',', '.')) >= Number(interEl[1].toString().replace(',', '.')) &&\n                      Number(toSamplingEl[1].toString().replace(',', '.')) < Number(interEl[2].toString().replace(',', '.'))) { // comparing holes ids && making sure inter Depth From is between sample Depth From and Depth To\n                      console.log(\"in\");\n                      interEl.forEach((tocopy) => { // then copy all to sampling\n                        toSamplingEl.push(tocopy);\n                      })\n                    } else {\n                      console.log(\"No match:\")\n                    }\n                  // } else {\n                  //   console.log(\"not in: \", )\n                  // }\n                }\n              });\n            }\n          })\n        })\n      }\n    });\n\n    var doneData = [];\n\n    var selectedDt = null;\n    var headersDt = null;\n    sheetsDt.forEach((shhht, i) => {\n      if (shhht.name == to) {\n        selectedDt = shhht.rows;\n      }\n    });\n\n    setSampling(selectedDt);\n\n    headersDt = selectedDt[0];\n    setExcelHeaders(selectedDt[0]);\n\n    for (var l = 0; l < selectedDt.length; l++) {\n      var objj = {};\n      for (var s = 0; s < selectedDt[l].length; s++) {\n        objj[selectedDt[0][s]] = selectedDt[l][s]\n      }\n      doneData.push(objj);\n    }\n\n    setExceldt(doneData);\n    setLoading(false);\n    setRenderExcel(true);\n    console.log(\"doneData: \", doneData);\n    console.log(\"sheetsDt when crazyness is done: \", sheetsDt);\n  }\n\n\n  const copy = (obj1) => {\n    var obj3 = {};\n    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }\n    return obj3;\n  }\n\n  const copyArr = (arr1) => {\n    var arr2 = [];\n    for (var i = 0; i < arr1.length; i++) { arr2[i] = copy(arr1[i]); }\n    return arr2;\n  }\n\n  return (\n    <div className=\"App App-header\">\n      <h4>Pour commencer Cliquez sure \"Choose File\". </h4>\n      <ul style={{ fontSize: '1.1rem', textAlign: 'left' }}>\n        <li>Selectionnez votre fichier excel</li>\n        <li>Cliquez sure \"Commencer\"</li>\n      </ul>\n      <h4>Veuillez vous assurez que les column suivant sont presentes et correspondes: </h4>\n      <ul style={{ fontSize: '1.1rem', textAlign: 'left' }}>\n        <li>A: Hole ID\t</li>\n        <li>B: Depth From</li>\n        <li>C: Depth To</li>\n      </ul>\n      <h4>Ce programme se chargera de copier les donnees en ce basant sur cette structure!</h4>\n      <h4>Le programme affichera deux fois la meme liste </h4>\n      <ul style={{ fontSize: '1.1rem', textAlign: 'left' }}>\n        <li>En utilisant la liste de gauche, selection le sheet d'origine.</li>\n        <li>Puis utilisez la liste de droite pour selectionner le sheet de destination</li>\n        <li>Cliquez maintenant sur \"GENERER\"</li>\n        <li>Nommez votre fichier en precisant l'extension (.csv)</li>\n      </ul>\n      <FormControl component=\"fieldset\">\n        {/* <FormLabel component=\"legend\">Label Placement</FormLabel> */}\n        <FormGroup aria-label=\"position\" row style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>\n          <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center' }}>\n            <input type=\"file\" id=\"input\" accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\" />\n            {!loading ? (\n              <Button style={{ backgroundColor: 'white', color: 'black', margin: '0px 15px' }} onClick={getFile}>Commencer</Button>\n            ) : null}\n          </div>\n          {noFileErr && (<span style={{ color: 'red', margin: '15px 0px' }}>Veuillez attacher un fichier excel. Cliquez sure \"choose File\"</span>)}\n          {sheetsNames.length > 0 && (\n            <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', flexWrap: 'wrap', marginTop: '55px' }}>\n              <FormControl component=\"fieldset\" style={{ borderRight: '1px solid white', marginRight: '15px' }}>\n                <FormLabel style={{ color: 'white' }}>COPIER DE:</FormLabel>\n                <RadioGroup aria-label=\"gender\" name=\"gender1\" value={from} onChange={(e) => handleSheetSelect(e, 'from')}>\n                  {sheetsNames.map((n, id) => (\n                    <div key={'n' + id} className=\"mdc-touch-target-wrapper\" style={{ display: 'flex', margin: '15px 5px', flexDirection: 'row', justifyContent: 'space-around', flexWrap: 'wrap' }}>\n                      {/* <Checkbox color=\"primary\" checked={n.checked} onChange={(e) => handleSheetSelect(e, n.name)} />{n.name} */}\n                      <FormControlLabel value={n.name} control={<Radio />} label={n.name} />\n                    </div>))}\n                </RadioGroup>\n              </FormControl>\n              <FormControl component=\"fieldset\">\n                <FormLabel style={{ color: 'white' }}>ET COLLER DANS:</FormLabel>\n                <RadioGroup aria-label=\"gender\" name=\"gender12\" value={to} onChange={(e) => handleSheetSelect(e, 'to')}>\n                  {sheetsNames.map((n, id) => (\n                    <div key={'n-' + id} className=\"mdc-touch-target-wrapper\" style={{ display: 'flex', margin: '15px 5px', flexDirection: 'row', justifyContent: 'space-around', flexWrap: 'wrap' }}>\n                      {/* <Checkbox color=\"primary\" checked={n.checked} onChange={(e) => handleSheetSelect(e, n.name)} />{n.name} */}\n                      <FormControlLabel value={n.name} control={<Radio />} label={n.name} />\n                    </div>))}\n                </RadioGroup>\n              </FormControl>\n            </div>\n          )}\n          {!loading && input && input.files[0] ? (\n            <Button style={{ backgroundColor: 'white', color: 'black', marginBottom: '15px' }} onClick={filter}>Generer</Button>\n          ) : (<> {loading && <h4><CircularProgress /> Veuillez patienter... loading...</h4>} </>)}\n          {noValidSheetErr && (\n            <span style={{ color: 'red', margin: '15px 0px' }}>Veuillez attacher un fichier excel contenant un sheet <strong style={{ textDecoration: 'underline' }}>\"2021_Intercepts_TC0.5\"</strong> et <strong style={{ textDecoration: 'underline' }}>\"Sampling\"</strong> </span>\n          )}\n        </FormGroup>\n      </FormControl>\n      {renderExcel && (\n        <CSVDownload data={sampling} target=\"_blank\" />\n        //     <ExcelFile>\n        //     <ExcelSheet data={exceldt} name=\"Sampling\">\n        //       {excelHeaders.map((head, iii) => (\n        //         <ExcelColumn key={\"h\"+iii} label={head} value={head}/>\n        //       ))}\n        //     </ExcelSheet>\n        // </ExcelFile>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport { createBrowserHistory } from \"history\";\nimport logo from './logo.svg';\nimport './App.css';\n\nconst hist = createBrowserHistory();\n\nfunction App() {\n\n  return (\n    <>\n      <Router history={hist}>\n          <Switch>\n            <Route path=\"/\" render={() => (<Home />)} />\n          </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}