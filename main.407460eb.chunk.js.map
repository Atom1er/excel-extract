{"version":3,"sources":["logo.svg","Home.js","App.js","reportWebVitals.js","index.js"],"names":["ReactExport","ExcelFile","ExcelSheet","ExcelColumn","App","useState","loading","setLoading","sheetsNames","setSheetsNames","sheetsData","setSheetsData","input","setInput","setExcelHeaders","setExceldt","renderExcel","setRenderExcel","sampling","setSampling","noFileErr","setNoFileErr","setNoSamplingErr","setNoInterErr","noValidSheetErr","from","setFrom","to","setTo","useEffect","document","getElementById","getData","names","index","length","readXlsxFile","files","sheet","name","then","rows","sheetsDt","push","checked","i","setTimeout","console","log","handleSheetSelect","e","type","target","value","className","style","fontSize","textAlign","FormControl","component","FormGroup","row","display","flexDirection","justifyContent","id","accept","Button","backgroundColor","color","margin","onClick","getSheets","nmes","forEach","n","flexWrap","marginTop","borderRight","marginRight","FormLabel","RadioGroup","onChange","map","FormControlLabel","control","Radio","label","marginBottom","sht","el","shttt","samplingEl","sampRowId","sheeet","interEl","Number","toString","replace","tocopy","doneData","selectedDt","shhht","l","objj","s","CircularProgress","textDecoration","data","hist","createBrowserHistory","history","path","render","Home","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.407460eb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport readXlsxFile from 'read-excel-file';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ReactExport from \"react-data-export\";\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\n\r\nconst ExcelFile = ReactExport.ExcelFile;\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\r\n\r\n\r\nfunction App() {\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [sheetsNames, setSheetsNames] = useState([]);\r\n  const [sheetsData, setSheetsData] = useState([]);\r\n  const [input, setInput] = useState(null);\r\n  const [excelHeaders, setExcelHeaders] = useState(null);\r\n  const [exceldt, setExceldt] = useState(null);\r\n  const [renderExcel, setRenderExcel] = useState(false);\r\n  const [sampling, setSampling] = useState(false);\r\n  const [noFileErr, setNoFileErr] = useState(false);\r\n  const [noSamplingErr, setNoSamplingErr] = useState(true);\r\n  const [noInterErr, setNoInterErr] = useState(true);\r\n  const [noValidSheetErr, setNoValidSheetErr] = useState(false);\r\n  const [from, setFrom] = useState('');\r\n  const [to, setTo] = useState('');\r\n\r\n  useEffect(() => {\r\n    setInput(document.getElementById('input'))\r\n  }, [])\r\n\r\n  const getFile = () => {\r\n    console.log('clicked');\r\n\r\n\r\n    if (input.files[0]) {\r\n      setLoading(true);\r\n      setNoFileErr(false);\r\n      // input.addEventListener('change', () => {\r\n      readXlsxFile(input.files[0], { getSheets: true }).then((names) => {\r\n        console.log(\"names: \", names);\r\n        // names === [{ name: 'Sheet1' }, { name: 'Sheet2' }]\r\n        var nmes = [];\r\n        names.forEach(n => {\r\n          nmes.push({\r\n            name: n.name,\r\n            checked: false\r\n          })\r\n        })\r\n        setSheetsNames(nmes);\r\n        setSheetsData([]);\r\n        setNoInterErr(true);\r\n        setNoSamplingErr(true);\r\n        if (names.length > 0) {\r\n          getData(names, 0);\r\n        }\r\n        // \r\n      })\r\n    } else {\r\n      setNoFileErr(true);\r\n    }\r\n    // })\r\n  }\r\n\r\n  const getData = (names, index) => {\r\n    if (names.length > index) {\r\n      readXlsxFile(input.files[0], { sheet: names[index].name }).then((rows) => {\r\n        var sheetsDt = sheetsData;\r\n        sheetsDt.push({\r\n          name: names[index].name,\r\n          rows: rows,\r\n          checked: true\r\n        });\r\n        if (names[index].name == from) {\r\n          setNoInterErr(false);\r\n        }\r\n        if (names[index].name == to) {\r\n          setNoSamplingErr(false);\r\n        }\r\n        setSheetsData(sheetsDt);\r\n        var i = index + 1;\r\n        setTimeout(() => {\r\n          getData(names, i);\r\n        }, 1000)\r\n      })\r\n    } else {\r\n      setTimeout(() => {\r\n        setLoading(false);\r\n        console.log(\"sheetsData: \", sheetsData);\r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n  const handleSheetSelect = (e, type) => {\r\n    if(type == 'from'){\r\n      setFrom(e.target.value)\r\n    } else {\r\n      setTo(e.target.value);\r\n    }\r\n  }\r\n\r\n  const filter = () => {\r\n    // if (noInterErr || noSamplingErr) {\r\n    //   setNoValidSheetErr(true);\r\n    //   return;\r\n    // } else {\r\n    //   setNoValidSheetErr(false);\r\n    // }\r\n    var sheetsDt = sheetsData;\r\n    //Copying headers\r\n    setLoading(true);\r\n    sheetsDt.forEach((sht) => {\r\n      if (sht.name == to) {\r\n        sheetsDt.forEach((sheet) => {\r\n          if (sheet.name == from) {\r\n            sheet.rows[0].forEach((el) => {\r\n              sht.rows[0].push(el);\r\n            })\r\n          }\r\n        });\r\n      }\r\n    });\r\n    //merging\r\n    sheetsDt.forEach((shttt, i) => {\r\n      if (shttt.name == to) { // found target\r\n        shttt.rows.forEach((samplingEl, sampRowId) => { // loop rows\r\n\r\n          sheetsDt.forEach((sheeet) => {\r\n            if (sheeet.name == from) { // found data source\r\n              sheeet.rows.forEach((interEl) => {\r\n                if (samplingEl[0] == interEl[0] && samplingEl[1] && interEl[1] && interEl[2] && Number(samplingEl[1].toString().replace(',', '.')) >= Number(interEl[1].toString().replace(',', '.')) && Number(samplingEl[1].toString().replace(',', '.')) < Number(interEl[2].toString().replace(',', '.'))) { // comparing holes ids && making sure inter Depth From is between sample Depth From and Depth To\r\n                  // console.log(\"in\");\r\n                  interEl.forEach((tocopy) => { // then copy all to sampling\r\n                    samplingEl.push(tocopy);\r\n                  })\r\n                }\r\n              });\r\n            }\r\n          })\r\n        })\r\n      }\r\n    });\r\n\r\n    var doneData = [];\r\n\r\n    var selectedDt = null;\r\n    var headersDt = null;\r\n    sheetsDt.forEach((shhht, i) => {\r\n      if (shhht.name == to) {\r\n        selectedDt = shhht.rows;\r\n      }\r\n    });\r\n\r\n    setSampling(selectedDt);\r\n\r\n    headersDt = selectedDt[0];\r\n    setExcelHeaders(selectedDt[0]);\r\n\r\n    for (var l = 0; l < selectedDt.length; l++) {\r\n      var objj = {};\r\n      for (var s = 0; s < selectedDt[l].length; s++) {\r\n        objj[selectedDt[0][s]] = selectedDt[l][s]\r\n      }\r\n      doneData.push(objj);\r\n    }\r\n\r\n    setExceldt(doneData);\r\n    setLoading(false);\r\n    setRenderExcel(true);\r\n    console.log(\"doneData: \", doneData);\r\n    console.log(\"sheetsDt when crazyness is done: \", sheetsDt);\r\n  }\r\n\r\n\r\n  const copy = (obj1) => {\r\n    var obj3 = {};\r\n    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }\r\n    return obj3;\r\n  }\r\n\r\n  const copyArr = (arr1) => {\r\n    var arr2 = [];\r\n    for (var i = 0; i < arr1.length; i++) { arr2[i] = copy(arr1[i]); }\r\n    return arr2;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App App-header\">\r\n      <h4>Pour commencer Cliquez sure \"Choose File\". </h4>\r\n      <ul style={{ fontSize: '1.1rem', textAlign: 'left' }}>\r\n        <li>Selectionnez votre fichier excel</li>\r\n        <li>Cliquez sure \"Commencer\"</li>\r\n      </ul>\r\n      <h4>Veuillez vous assurez que les column suivant sont presentes et correspondes: </h4>\r\n      <ul style={{ fontSize: '1.1rem', textAlign: 'left' }}>\r\n        <li>A: Hole ID\t</li>\r\n        <li>B: Depth From</li>\r\n        <li>C: Depth To</li>\r\n      </ul>\r\n      <h4>Ce programme se chargera de copier les donnees en ce basant sur cette structure!</h4>\r\n      <h4>Le programme affichera deux fois la meme liste </h4>\r\n      <ul style={{ fontSize: '1.1rem', textAlign: 'left' }}>\r\n        <li>En utilisant la liste de gauche, selection le sheet d'origine.</li>\r\n        <li>Puis utilisez la liste de droite pour selectionner le sheet de destination</li>\r\n        <li>Cliquez maintenant sur \"GENERER\"</li>\r\n        <li>Nommez votre fichier en precisant l'extension (.csv)</li>\r\n      </ul>\r\n      <FormControl component=\"fieldset\">\r\n        {/* <FormLabel component=\"legend\">Label Placement</FormLabel> */}\r\n        <FormGroup aria-label=\"position\" row style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>\r\n          <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center' }}>\r\n            <input type=\"file\" id=\"input\" accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\" />\r\n            {!loading ? (\r\n              <Button style={{ backgroundColor: 'white', color: 'black', margin: '0px 15px' }} onClick={getFile}>Commencer</Button>\r\n            ) : null}\r\n          </div>\r\n          {noFileErr && (<span style={{ color: 'red', margin: '15px 0px' }}>Veuillez attacher un fichier excel. Cliquez sure \"choose File\"</span>)}\r\n          {sheetsNames.length > 0 && (\r\n            <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', flexWrap: 'wrap', marginTop: '55px' }}>\r\n              <FormControl component=\"fieldset\" style={{borderRight: '1px solid white', marginRight: '15px'}}>\r\n                <FormLabel style={{color: 'white'}}>COPIER DE:</FormLabel>\r\n                <RadioGroup aria-label=\"gender\" name=\"gender1\" value={from} onChange={(e) => handleSheetSelect(e, 'from')}>\r\n                  {sheetsNames.map((n, id) => (\r\n                    <div key={'n' + id} className=\"mdc-touch-target-wrapper\" style={{ display: 'flex', margin: '15px 5px', flexDirection: 'row', justifyContent: 'space-around', flexWrap: 'wrap' }}>\r\n                      {/* <Checkbox color=\"primary\" checked={n.checked} onChange={(e) => handleSheetSelect(e, n.name)} />{n.name} */}\r\n                      <FormControlLabel value={n.name} control={<Radio />} label={n.name} />\r\n                    </div>))}\r\n                </RadioGroup>\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormLabel style={{color: 'white'}}>ET COLLER DANS:</FormLabel>\r\n                <RadioGroup aria-label=\"gender\" name=\"gender12\" value={to} onChange={(e) => handleSheetSelect(e, 'to')}>\r\n                  {sheetsNames.map((n, id) => (\r\n                    <div key={'n-' + id} className=\"mdc-touch-target-wrapper\" style={{ display: 'flex', margin: '15px 5px', flexDirection: 'row', justifyContent: 'space-around', flexWrap: 'wrap' }}>\r\n                      {/* <Checkbox color=\"primary\" checked={n.checked} onChange={(e) => handleSheetSelect(e, n.name)} />{n.name} */}\r\n                      <FormControlLabel value={n.name} control={<Radio />} label={n.name} />\r\n                    </div>))}\r\n                </RadioGroup>\r\n              </FormControl>\r\n            </div>\r\n          )}\r\n          {!loading && input && input.files[0] ? (\r\n            <Button style={{ backgroundColor: 'white', color: 'black', marginBottom: '15px'}} onClick={filter}>Generer</Button>\r\n          ) : (<> {loading && <h4><CircularProgress /> Veuillez patienter... loading...</h4>} </>)}\r\n          {noValidSheetErr && (\r\n            <span style={{ color: 'red', margin: '15px 0px' }}>Veuillez attacher un fichier excel contenant un sheet <strong style={{ textDecoration: 'underline' }}>\"2021_Intercepts_TC0.5\"</strong> et <strong style={{ textDecoration: 'underline' }}>\"Sampling\"</strong> </span>\r\n          )}\r\n        </FormGroup>\r\n      </FormControl>\r\n      {renderExcel && (\r\n        <CSVDownload data={sampling} target=\"_blank\" />\r\n        //     <ExcelFile>\r\n        //     <ExcelSheet data={exceldt} name=\"Sampling\">\r\n        //       {excelHeaders.map((head, iii) => (\r\n        //         <ExcelColumn key={\"h\"+iii} label={head} value={head}/>\r\n        //       ))}\r\n        //     </ExcelSheet>\r\n        // </ExcelFile>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Router, Switch, Route } from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nconst hist = createBrowserHistory();\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n      <Router history={hist}>\r\n          <Switch>\r\n            <Route path=\"/\" render={() => (<Home />)} />\r\n          </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}